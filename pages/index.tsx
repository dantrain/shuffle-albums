import { range, shuffle } from "lodash-es";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useCallback, useEffect, useState } from "react";
import useSWR from "swr";
import "twin.macro";
import Button from "../components/Button";
import fetcher from "../utils/fetcher";

const useAlbumsCount = () => {
  const { data, error } = useSWR<{ total: number }>(
    "/me/albums?limit=1",
    fetcher
  );

  return {
    total: data?.total,
    isLoading: !error && !data,
    isError: error,
  };
};

const getOffset = (shuffledOffsets: number[], index: number) =>
  shuffledOffsets[index % shuffledOffsets.length];

const AlbumShuffler = () => {
  const { total, isLoading, isError } = useAlbumsCount();
  const [shuffledOffsets, setShuffledOffsets] = useState<number[]>([]);
  const [index, setIndex] = useState(0);

  useEffect(() => {
    if (total) {
      setShuffledOffsets(shuffle(range(total)));
      setIndex(0);
    }
  }, [total]);

  const handleShuffle = useCallback(() => {
    setIndex((index) => index + 1);
  }, []);

  if (isError) return <p>Failed to load</p>;
  if (isLoading || !shuffledOffsets.length) return null;

  return (
    <>
      <Album
        offset={getOffset(shuffledOffsets, index)}
        onShuffle={handleShuffle}
      />
      <div tw="sr-only">
        {range(4).map((rangeIndex) => (
          <Album
            key={rangeIndex}
            offset={getOffset(shuffledOffsets, index + rangeIndex + 1)}
            onShuffle={handleShuffle}
          />
        ))}
      </div>
    </>
  );
};

const useAlbum = (offset: number) => {
  const { data, error } = useSWR<{
    items: {
      album: {
        id: string;
        name: string;
        uri: string;
        artists: { name: string; uri: string }[];
        images: { url: string; width: number; height: number }[];
      };
    }[];
  }>(`/me/albums?limit=1&offset=${offset}`, fetcher, {
    dedupingInterval: 3600000,
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
  });

  return {
    album: data?.items[0].album!,
    isLoading: !error && !data,
    isError: error,
  };
};

const Album = ({
  offset,
  onShuffle: shuffle,
}: {
  offset: number;
  onShuffle: () => void;
}) => {
  const { album, isLoading, isError } = useAlbum(offset);

  if (isError) return <p>Failed to load</p>;
  if (isLoading) return null;

  const image = album.images[0];

  return (
    <div tw="text-center">
      <div
        tw="mx-auto mb-8 overflow-hidden bg-black rounded-sm shadow-3xl"
        style={{ width: 640, height: 640 }}
      >
        <a tw="relative block" href={album.uri}>
          <Image
            src={image.url}
            alt={album.name}
            width={image.width}
            height={image.height}
          />
          <div tw="absolute inset-0 shadow-inset" />
        </a>
      </div>
      <p tw="mb-2 text-2xl font-bold">
        <a href={album.uri}>{album.name}</a>
      </p>
      <p tw="text-lg text-gray-400 mb-11">
        <a href={album.artists[0].uri}>{album.artists[0].name}</a>
      </p>
      <div tw="flex justify-center mb-20">
        <Button onClick={shuffle}>Shuffle</Button>
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  return (
    <div>
      <Head>
        <title>Spotify Albums</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main tw="mt-20">
        <AlbumShuffler />
      </main>
    </div>
  );
};

export default Home;
