import { range, shuffle } from "lodash-es";
import type { NextPage } from "next";
import Head from "next/head";
import React, { useCallback, useEffect, useState } from "react";
import { ErrorBoundary } from "react-error-boundary";
import useSWR from "swr";
import AlbumArt from "../components/AlbumArt";
import Button from "../components/Button";
import Suspense from "../components/Suspense";
import fetcher from "../utils/fetcher";
import { Transition, TransitionGroup } from "react-transition-group";
import tw from "twin.macro";

const useAlbumsCount = () => {
  const { data } = useSWR<{ total: number }>("/me/albums?limit=1", fetcher, {
    suspense: true,
  });

  return { total: data?.total };
};

const getOffset = (shuffledOffsets: number[], index: number) =>
  shuffledOffsets[index % shuffledOffsets.length];

const AlbumShuffler = () => {
  const { total } = useAlbumsCount();
  const [shuffledOffsets, setShuffledOffsets] = useState<number[]>([]);
  const [index, setIndex] = useState(0);

  useEffect(() => {
    if (total) {
      setShuffledOffsets(shuffle(range(total)));
      setIndex(0);
    }
  }, [total]);

  const handleShuffle = useCallback(() => {
    setIndex((index) => index + 1);
  }, []);

  const offset = getOffset(shuffledOffsets, index);

  return shuffledOffsets.length ? (
    <>
      <div tw="relative">
        <TransitionGroup>
          <Transition key={offset} timeout={{ exit: 200 }}>
            {(state) => (
              <div
                css={[
                  tw`transition-transform`,
                  state === "exiting" &&
                    tw`absolute top-0 w-full transition duration-200 ease-in-quad`,
                ]}
                style={{
                  transform:
                    state === "exiting"
                      ? `translateY(-200%) translateX(${
                          (offset % 20) - 10
                        }%) rotate(${(offset % 20) - 10}deg)`
                      : undefined,
                }}
              >
                <Album offset={offset} hidden={state === "exiting"} />
              </div>
            )}
          </Transition>
        </TransitionGroup>
      </div>
      <div tw="flex justify-center mb-20">
        <Button onClick={handleShuffle}>Shuffle</Button>
      </div>
      <div tw="sr-only">
        <Suspense fallback={<></>}>
          {range(4).map((rangeIndex) => (
            <Album
              key={rangeIndex}
              offset={getOffset(shuffledOffsets, index + rangeIndex + 1)}
              hidden
            />
          ))}
        </Suspense>
      </div>
    </>
  ) : null;
};

const useAlbum = (offset: number) => {
  const { data } = useSWR<{
    items: {
      album: {
        id: string;
        name: string;
        uri: string;
        artists: { name: string; uri: string }[];
        images: { url: string; width: number; height: number }[];
      };
    }[];
  }>(`/me/albums?limit=1&offset=${offset}`, fetcher, {
    suspense: true,
    dedupingInterval: 3600000,
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
  });

  return { album: data?.items[0].album! };
};

const Album = ({ offset, hidden }: { offset: number; hidden?: boolean }) => {
  const { album } = useAlbum(offset);
  const image = album.images[0];

  return (
    <div tw="text-center">
      <AlbumArt
        href={album.uri}
        src={image.url}
        alt={album.name}
        disableFocus={hidden}
      />
      {hidden ? null : (
        <>
          <p tw="mb-2 text-2xl font-bold">
            <a href={album.uri} tabIndex={hidden ? -1 : undefined}>
              {album.name}
            </a>
          </p>
          <p tw="text-lg text-gray-400 mb-11">
            <a href={album.artists[0].uri} tabIndex={hidden ? -1 : undefined}>
              {album.artists[0].name}
            </a>
          </p>
        </>
      )}
    </div>
  );
};

const Home: NextPage = () => {
  return (
    <div>
      <Head>
        <title>Spotify Albums</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main tw="mt-20">
        <ErrorBoundary
          fallbackRender={({ error }) => <pre>{error.message}</pre>}
        >
          <Suspense fallback={<></>}>
            <AlbumShuffler />
          </Suspense>
        </ErrorBoundary>
      </main>
    </div>
  );
};

export default Home;
